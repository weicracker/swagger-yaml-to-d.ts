/**
 * USERAPI
 * API 发布管理
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/weicracker/swagger-yaml-to-d.ts
 * Do not edit the class manually.
 */

/// <reference types="request" />
/// <reference types="bluebird" />
/// <reference types="node" />
/// <reference types="http" />

declare namespace USERAPI {
    interface JsonResultSXLOfArrayListOfGroupVO {
        'code': string;
        'data': Array < GroupVO > ;
        'message': string;
    }
    interface ResetPwsVO {
        'newPwd': string;
        'telConfirmCode': string;
        'telNum': string;
    }
    interface ReCofingVO {
        //账号的注册形式（手机、邮箱）
        'type': string;
        //账号的注册值
        'typeValue': string;
        //账号所属的用户类型
        'userType': string;
    }
    interface FrGroupMemb {
        //群id
        'groupid': string;
        //成员id（id之间用逗号隔开,例如“aa232d3,ddvdf3,dfd222”）
        'memberid': string;
    }
    interface JsonResultSXLOfstring {
        'code': string;
        'data': string;
        'message': string;
    }
    interface JsonResultSXLOfListOfConcernVO {
        'code': string;
        'data': Array < ConcernVO > ;
        'message': string;
    }
    interface JsonResultSXLOfUriVO {
        'code': string;
        'data': UriVO;
        'message': string;
    }
    interface ConcernVO {
        //关注的好友Id
        'concernId': string;
        //Id
        'id': string;
        //用戶Id
        'userId': string;
    }
    interface GroupIdVO {
        //Id
        'id': string;
    }
    interface UserFriend1VO {
        //Id
        'id': string;
        //头像
        'img': string;
        //姓名
        'name': string;
        //个性签名
        'perSignature': string;
    }
    interface Org1VO {
        //组织中的部门信息
        'department': Array < Org1VO > ;
        //组织头像
        'img': string;
        //组织营业执照照片
        'imgLaw': string;
        //组织Id
        'orgId': string;
        //组织名称
        'orgName': string;
        //组织父节点Id
        'parentId': string;
        //组织纳税登记号
        'payId': string;
    }
    interface CurrUserNameVO {
        //邮箱
        'email': string;
        //头像
        'img': string;
        //姓名
        'name': string;
        //电话
        'tel': string;
        //类型
        'type': string;
        //账号
        'userCode': string;
        //Id
        'userId': string;
    }
    interface EmailVO {
        //邮箱
        'email': string;
    }
    interface JsonResultSXLOfListOfUserFriend1VO {
        'code': string;
        'data': Array < UserFriend1VO > ;
        'message': string;
    }
    interface ResetPwsEmailVO {
        'email': string;
        'emailConfirmCode': string;
        'newPwd': string;
    }
    interface JsonResultSXLOfListOfUserCode1VO {
        'code': string;
        'data': Array < UserCode1VO > ;
        'message': string;
    }
    interface JsonResultSXLOfListOfUserIdVO {
        'code': string;
        'data': Array < UserIdVO > ;
        'message': string;
    }
    interface UserPassword {
        //新密码
        'newPwd': string;
        //旧密码
        'oldPwd': string;
    }
    interface UserCodeVO {
        //用户code
        'userCode': string;
    }
    interface JsonResultSXLOfFrgroup {
        'code': string;
        'data': Frgroup;
        'message': string;
    }
    interface JsonResultSXLOfListOfOrgVO {
        'code': string;
        'data': Array < OrgVO > ;
        'message': string;
    }
    interface JsonResultSXLOfGroupIdVO {
        'code': string;
        'data': GroupIdVO;
        'message': string;
    }
    interface OrgUser1VO {
        //组织中的部门信息
        'department': Array < Org1VO > ;
        //是否是管理员
        'ifAdmin': string;
        //组织注册地址
        'orgAddress': string;
        //组织Id
        'orgId': string;
        //组织头像
        'orgImg': string;
        //组织营业执照照片
        'orgImgLaw': string;
        //组织名称
        'orgName': string;
        //组织营业执照号码
        'orgNumber': string;
        //组织父节点Id
        'orgParentId': string;
        //组织纳税登记号
        'orgPayId': string;
        //组织电话号码
        'orgTel': string;
    }
    interface JsonResultSXLOfListOfGroupVO {
        'code': string;
        'data': Array < GroupVO > ;
        'message': string;
    }
    interface JsonResultSXLOfListOfOrgOnlyVO {
        'code': string;
        'data': Array < OrgOnlyVO > ;
        'message': string;
    }
    interface UserCode1VO {
        //用户code
        'code': string;
        //code名称
        'codename': string;
        //id
        'id': string;
    }
    interface UserOrgVO {
        //身份证号
        'cardId': string;
        //身份证正面照片
        'cardIdImg1': string;
        //身份证反面照片
        'cardIdImg2': string;
        //用户真实姓名
        'cardIdName': string;
        //验证码
        'confirmCode': string;
        //用户的邮箱
        'email': string;
        //是否为管理员，1：是，0：否
        'ifAdmin': string;
        //用户头像
        'img': string;
        //是否在线
        'online': string;
        //组织注册地址
        'orgAddress': string;
        //组织ID
        'orgId': string;
        //组织头像信息
        'orgImg': string;
        //组织营业执照照片
        'orgImgLaw': string;
        //组织机构的名称
        'orgName': string;
        //组织营业执照号码
        'orgNumber': string;
        //组织机构上级组织
        'orgParentId': string;
        //组织纳税登记号
        'orgPayId': string;
        //组织电话号码
        'orgTel': string;
        //用户个性签名
        'perSignature': string;
        //用户的手机号码
        'tel': string;
        //个人用户还是企业用户
        'type': string;
        //用户登录名
        'userCode': string;
        //用户ID
        'userId': string;
        //用户昵称
        'userName': string;
        //密码
        'userPassword': string;
    }
    interface User {
        //身份证号
        'cardId': string;
        //身份证正面照片
        'cardIdImg1': string;
        //身份证反面照片
        'cardIdImg2': string;
        //用户真实姓名
        'cardIdName': string;
        //验证码
        'confirmCode': string;
        //用户的邮箱
        'email': string;
        //用户头像
        'img': string;
        //是否在线
        'online': string;
        //用户个性签名
        'perSignature': string;
        //用户的手机号码
        'tel': string;
        //个人用户还是企业用户
        'type': string;
        //账号
        'userCode': string;
        //用户ID
        'userId': string;
        //用户名（昵称）
        'userName': string;
        //密码
        'userPassword': string;
    }
    interface JsonResultSXLOfListOfOrgUser1VO {
        'code': string;
        'data': Array < OrgUser1VO > ;
        'message': string;
    }
    interface Frgroup {
        //成员数量（系统自动生成）
        'count': string;
        //创建时间（系统自动生成）
        'createtime': string;
        //创建者（系统自动生成）
        'creator': string;
        //群组ID（系统自动生成）
        'id': string;
        //群组图标
        'img': string;
        //是否被逻辑删除（yes,no）
        'logicDelete': string;
        //名称
        'name': string;
        //修改时间（系统自动生成）
        'updatatime': string;
    }
    interface JsonResultSXLOfListOfCurrUserNameVO {
        'code': string;
        'data': Array < CurrUserNameVO > ;
        'message': string;
    }
    interface JsonResultSXLOfEmailVO {
        'code': string;
        'data': EmailVO;
        'message': string;
    }
    interface UserFriendVO {
        //Id
        'id': string;
        //头像
        'img': string;
        //姓名
        'name': string;
    }
    interface JsonResultSXLOfCurUserInfoVO {
        'code': string;
        'data': CurUserInfoVO;
        'message': string;
    }
    interface JsonResultSXLOfReCofingVO {
        'code': string;
        'data': ReCofingVO;
        'message': string;
    }
    interface JsonResultSXLOfListOfFrgroupMemberVO {
        'code': string;
        'data': Array < FrgroupMemberVO > ;
        'message': string;
    }
    interface OrgOnlyVO {
        //头像
        'img': string;
        //Id
        'orgId': string;
        //名称
        'orgName': string;
        //父节点Id
        'parentId': string;
    }
    interface UserFriendsVO {
        //通知内容
        'friends': any;
        //通知内容
        'group': string;
    }
    interface FrgroupMemberVO {
        //对话
        'conversation': string;
        //创建时间
        'createtime': string;
        //群组Id
        'groupid': string;
        //Id
        'id': string;
        //头像
        'img': string;
        //成员别名
        'memberAlias': string;
        //成员Id
        'memberid': string;
        //姓名
        'name': string;
        //权限
        'power': string;
    }
    interface JsonResultSXLOfListOfOrgPeo1VO {
        'code': string;
        'data': Array < OrgPeo1VO > ;
        'message': string;
    }
    interface UriVO {
        //微信uri
        'uri': string;
    }
    interface CurUserOrgInfoVO {
        //是否是管理员
        'ifadmin': string;
        //注册地址
        'orgAddress': string;
        //Id
        'orgId': string;
        //头像
        'orgImg': string;
        //营业执照照片
        'orgImgLaw': string;
        //名称
        'orgName': string;
        //营业执照号码
        'orgNumber': string;
        //父节点Id
        'orgParentId': string;
        //纳税登记号
        'orgPayId': string;
        //电话号码
        'orgTel': string;
    }
    interface UserIdVO {
        //用戶Id
        'userid': string;
    }
    interface JsonResultSXLOfListOfUserFriendVO {
        'code': string;
        'data': Array < UserFriendVO > ;
        'message': string;
    }
    interface JsonResultSXLOfListOfUserFriendsVO {
        'code': string;
        'data': Array < UserFriendsVO > ;
        'message': string;
    }
    interface GroupVO {
        //数量
        'count': string;
        //创建时间
        'createtime': string;
        //创建者
        'creator': string;
        //Id
        'id': string;
        //头像
        'img': string;
        //姓名
        'name': string;
    }
    interface CurUserInfoVO {
        //身份证号
        'cardId': string;
        //身份证正面照片
        'cardIdImg1': string;
        //身份证反面照片
        'cardIdImg2': string;
        //身份证姓名
        'cardIdName': string;
        //是否改变
        'changes': string;
        //邮箱
        'email': string;
        //头像
        'img': string;
        //姓名
        'name': string;
        //当前登录用户的组织信息
        'org': Array < CurUserOrgInfoVO > ;
        //个性签名
        'perSignature': string;
        //电话
        'tel': string;
        //类型
        'type': string;
        //账号
        'userCode': string;
        //Id
        'userId': string;
    }
    interface OrgVO {
        //是否是管理员
        'ifAdmin': string;
        //头像
        'img': string;
        //Id
        'orgId': string;
        //名称
        'orgName': string;
        //企业是否同意用户加入(&#39;0&#39;:默认)(&#39;1&#39;:同意)(&#39;2&#39;:拒绝)
        'statusOrg': string;
        //类型
        'type': string;
    }
    interface FrgroupVO {
        //群组图标
        'img': string;
        //名称
        'name': string;
    }
    interface OrgPeo1VO {
        //Id
        'id': string;
        //头像
        'img': string;
        //姓名
        'name': string;
    }
    interface JsonResultSXLOfUserIdVO {
        'code': string;
        'data': UserIdVO;
        'message': string;
    }
    class USERAPIController {
        public getConfimCodeOfEmail(email ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfEmailVO;
        } > ;
        public captcha(randomNum ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfstring;
        } > ;
        public getConfimCode(telNum ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfstring;
        } > ;
        public findByFriend(XASPSESSION ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfListOfUserFriend1VO;
        } > ;
        public confUserFriendsId(XASPSESSION ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfListOfUserIdVO;
        } > ;
        public findByFriendOfLogin(XASPSESSION ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfListOfUserFriendsVO;
        } > ;
        public queryUsers(name ? : string, XASPSESSION ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfListOfOrgPeo1VO;
        } > ;
        public confEmail(email ? : string, confCode ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfstring;
        } > ;
        public confTel(telNum ? : string, confCode ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfstring;
        } > ;
        public queryFriends(name ? : string, XASPSESSION ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfListOfUserFriendVO;
        } > ;
        public getUserId(XASPSESSION ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfUserIdVO;
        } > ;
        public uniqueEmail(email ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfstring;
        } > ;
        public uniqueTel(telNum ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfstring;
        } > ;
        public uniqueConf(code ? : UserCodeVO, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfReCofingVO;
        } > ;
        public concernUsers(userIds ? : string, XASPSESSION ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfstring;
        } > ;
        public deleteConcernUsers(userIds ? : string, XASPSESSION ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfstring;
        } > ;
        public queryConcernUsers(concernid ? : string, XASPSESSION ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfListOfConcernVO;
        } > ;
        public currentUser(XASPSESSION ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfCurUserInfoVO;
        } > ;
        public updateCurrent(userOrgVO ? : UserOrgVO, XASPSESSION ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfUserIdVO;
        } > ;
        public currentUserOrgDepartment(XASPSESSION ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfListOfOrgUser1VO;
        } > ;
        public orgs(XASPSESSION ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfListOfOrgVO;
        } > ;
        public changePwd(userPassword ? : UserPassword, XASPSESSION ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfstring;
        } > ;
        public getNewPwdByEmail(resetPwsEmailVO ? : ResetPwsEmailVO, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfstring;
        } > ;
        public getNewPwdByTelNum(resetPwsVO ? : ResetPwsVO, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfstring;
        } > ;
        public currentUserFromName(userName ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfListOfCurrUserNameVO;
        } > ;
        public getUserInf(userId ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfCurUserInfoVO;
        } > ;
        public addFriends(userIds ? : string, XASPSESSION ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfstring;
        } > ;
        public deleteFriends(userIds ? : string, XASPSESSION ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfstring;
        } > ;
        public getFriGroup(XASPSESSION ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfArrayListOfGroupVO;
        } > ;
        public createFrgroup_1(frgroupvo ? : FrgroupVO, XASPSESSION ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfFrgroup;
        } > ;
        public searchGroup(id: string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfListOfGroupVO;
        } > ;
        public createFrgroup(id ? : string, name ? : string, XASPSESSION ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfGroupIdVO;
        } > ;
        public delgroup(id: string, XASPSESSION ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfstring;
        } > ;
        public addMember(frgroupMemb ? : FrGroupMemb, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfstring;
        } > ;
        public updateFrgroupMember(frgroupMemberId: string, alias: string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfstring;
        } > ;
        public searchCalendarsByCurrentUser(groupId: string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfListOfFrgroupMemberVO;
        } > ;
        public delMember(ids: string, XASPSESSION ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfstring;
        } > ;
        public ldapListen(): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfstring;
        } > ;
        public getforgs(XASPSESSION ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfListOfOrgOnlyVO;
        } > ;
        public registPersion(user ? : User, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfUserIdVO;
        } > ;
        public queryUsercode(userCode ? : string, XASPSESSION ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfstring;
        } > ;
        public queryUseremail(userEmail ? : string, XASPSESSION ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfstring;
        } > ;
        public queryUsertel(userTel ? : string, XASPSESSION ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfstring;
        } > ;
        public queryUserCode(): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfListOfUserCode1VO;
        } > ;
        public loginByweixin(userId ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfUriVO;
        } > ;
        public setAdmin(userId ? : string, orgId ? : string, ifAdmin ? : string, ): Promise < {
            response: http.ClientResponse;body: JsonResultSXLOfstring;
        } > ;
    }
}